/*
 * ResultsAppConnector.hpp
 *
 *  Created on: Apr 7, 2017
 *      Author: anjana
 */

#ifndef RESULTSAPPCONNECTOR_HPP_
#define RESULTSAPPCONNECTOR_HPP_

#include <string>
#include <iostream>
#include <map>

namespace result {
namespace api {

//Error codes
typedef enum
{
	INIT_OK = 0,
	INIT_FAIL,
	SEND_ANALYTIC_RESULT_OK,
	SEND_ANALYTIC_RESULT_FAIL
} ResultAPICode;

class ResultsAppConnector
{

public:
	/*
	 * Constructor
	 */
	ResultsAppConnector()
	{
	}

	/*
	 * Purpose: To perform all tasks necessary to initialize the connector
	 *          Usually reading parameters from a XML/YAML/JSON configuration files
	 *          must be performed here. A connector plugin may use a list of input parameters
	 *          provided in the map pointed by pInputParams, a list of input files provided
	 *          in the map pointed by pInputFiles or both.
	 * Input pInputParams  : A pointer to a map with input parameters need to initialize
	 *                       the plugin. Key = name of the parameter which must be a name returned
	 *                       by the getInputParameterList function, Value = Value of the
	 *                       parameter as a string.
	 * Input pInputFiles   : A pointer to a map with input files such as configuration files
	 *                       need to initialize the plugin.
	 *                       Key = name of the file which must be a name returned by the
	 *                       function getInputFileList(). Example : "Configuration file"
	 *                       Value = Absolute file path Example : "\usr\local\anlytic_server\app1\config.xml"
	 * Output sOutputMsg   : A message indicating the result of executing the function. This could
	 *                       be an error message in case of a failure.
	 */
	virtual ResultAPICode init(const std::map<std::string, std::string>* pInputParams,
			                   const std::map<std::string, std::string>* pInputFiles,
			                   std::string& sOutputMsg) = 0;

	/*
	 * Purpose: Send data related to an analytic result along with the images and videos produced
	 *          to the connected analytic results receiving application.
	 * Input pData  : A ptr. to a map with analytic data such as timestamp, result text etc. Key = name
	 * Input pImages: A ptr. to a map of path to analytic results images. Key = filename
	 * Input pVideos: A ptr. to a map of path to analytic results videos. Key = filename
	 *
	 *
	 */
	virtual ResultAPICode sendAnalyticResults(const std::map<std::string, std::string>* pData,
			const std::map<std::string, std::string>* pImages,
			const std::map<std::string, std::string>* pVideos) = 0;

	/*
	 * Purpose: Return a list of input files required to initialize and communicate with the
	 *          remote results app. Override to suit a specific connector plugin.
	 * Output : An XML stream containing the details of input files formatted as name,
	 *          required(required = true, optional = false) and description elements.
	 */
	virtual std::string getInputFileList()
	{
		return generateInputFileListXml();
	}

	/*
	 * Purpose: Return a list of input parameters required to initialize and communicate
	 *          with the remote results application. Override to suit a specific connector plugin.
	 * Output : An XML stream containing the details of input parameters formatted as name,
	 *          required(required = true, optional = false) and description elements.
	 */
	virtual std::string getInputParameterList()
	{
		return generateInputParameterList();
	}

	/*
	 * Destructor
	 */
	virtual ~ResultsAppConnector()
	{
	}

private:
	/*
	 * Purpose: Return the input file details as an XML stream
	 */
	std::string generateInputFileListXml()
	{
		/* Sample XML stream:

			<?xml version="1.0" encoding="UTF-8"?>
			<inputfiles>
				<inputfile>
					<name>Configuration file</name>
					<required>true</required>
					<description>
						Include details such as host and port required to communicate with the remote
						application in this file. File format is JSON. A sample file can be
						found in config.json file in the connector plugin archive(.zip file)
					</description>
				</inputfile>

				<inputfiles>
					<name>SSL certificate</name>
					<required>true</required>
					<description>
						The remote application communicates over TLS(SSL).
						Therefore provide the SSL certificate file of the remote application.
					</description>
				</inputfile>
			</inputfiles>
		 */

		std::string sXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		sXml.append("<inputfiles><inputfile>");
		sXml.append("<name>Configuration file</name>");
		sXml.append("<required>true</required>");
		sXml.append("<description>");
		sXml.append("Include details such as host and port required to communicate with the remote");
		sXml.append("application in this file. File format is JSON. A sample file can be");
		sXml.append("found in config.json file in the connector plugin archive(.zip file)");
		sXml.append("</description></inputfile>");

		sXml.append("<inputfile><name>SSL certificate</name>");
		sXml.append("<required>true</required>");
		sXml.append("<description>");
		sXml.append("The remote application communicates over TLS(SSL).");
		sXml.append("Therefore provide the SSL certificate file of the remote application.");
		sXml.append("</description></inputfile>");

		sXml.append("</inputfiles>");
		return sXml;
	}

	/*
	 * Purpose: Return the input parameter details as an XML stream
	 */
	std::string generateInputParameterList()
	{
		/* Sample XML stream:

			<?xml version="1.0" encoding="UTF-8"?>
			<inputparams>
				<inputparam>
					<name>Host URL</name>
					<required>true</required>
					<description>
						URL of the remote results application host
					</description>
				</inputparam>
				<inputparam>
					<name>Port number</name>
					<required>false</required>
					<description>
						Port of the remote results application host
					</description>
				</inputparam>
			</inputparams>
		*/

		std::string sXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		sXml.append("<inputparams><inputparam>");
		sXml.append("<name>Host URL</name>");
		sXml.append("<required>true</required>");
		sXml.append("<description>");
		sXml.append("URL of the remote results application host");
		sXml.append("</description></inputparam>");

		sXml.append("<inputparam><name>Port number</name>");
		sXml.append("<required>false</required>");
		sXml.append("<description>");
		sXml.append("Port of the remote results application host");
		sXml.append("</description></inputparam>");

		sXml.append("</inputparams>");
		return sXml;
	}
};

} // namespace api
} // namespace analytic

/*
 * In YOUR_CONNECTOR_CLASS.hpp include these two functions.
 *
extern "C" YOUR_CONNECTOR_CLASS* create() {
    return new YOUR_CONNECTOR_CLASS();
}

extern "C" void destroy(YOUR_CONNECTOR_CLASS* p) {
    if(p) {
    	// do whatever you want to close everything
    	delete p;
    }
}
*/

#endif /* RESULTSAPPCONNECTOR_HPP_ */


